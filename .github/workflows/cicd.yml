name: Deploy AI-Powered Cost Anomaly Detector

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        if: secrets.AWS_ACCESS_KEY_ID != ''
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Log in to Amazon ECR
        if: secrets.AWS_ACCESS_KEY_ID != ''
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        if: secrets.AWS_ACCESS_KEY_ID != ''
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY_NAME }}
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG src
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.2.0

      - name: Terraform Init
        if: secrets.AWS_ACCESS_KEY_ID != ''
        run: terraform init
        working-directory: ./terraform

      - name: Terraform Plan
        if: secrets.AWS_ACCESS_KEY_ID != ''
        run: terraform plan -var="slack_bot_token=${{ secrets.SLACK_BOT_TOKEN }}"
        working-directory: ./terraform

      - name: Terraform Apply
        if: secrets.AWS_ACCESS_KEY_ID != ''
        run: terraform apply -auto-approve -var="slack_bot_token=${{ secrets.SLACK_BOT_TOKEN }}"
        working-directory: ./terraform 